-- https://github.com/folke/which-key.nvim/blob/370ec46f710e058c9c1646273e6b225acf47cbed/lua/which-key/plugins/presets.lua#L1
-- With letter case converted to CMOS 18th Edition
local M = {}

M.operators = {
  preset = true,
  mode = { 'n', 'x' },
  { '!', desc = 'Run Program' },
  { '<', desc = 'Indent Left' },
  { '>', desc = 'Indent Right' },
  { 'V', desc = 'Visual Line' },
  { 'c', desc = 'Change' },
  { 'd', desc = 'Delete' },
  { 'gU', desc = 'Uppercase' },
  { 'gu', desc = 'Lowercase' },
  { 'g~', desc = 'Toggle Case' },
  { 'gw', desc = 'Format' },
  { 'r', desc = 'Replace' },
  { 'v', desc = 'Visual' },
  { 'y', desc = 'Yank' },
  { 'zf', desc = 'Create Fold' },
  { '~', desc = 'Toggle Case' },
}

M.motions = {
  mode = { 'o', 'x', 'n' },
  preset = true,
  { '$', desc = 'End of Line' },
  { '%', desc = 'Matching (){}[]' },
  { '0', desc = 'Start of Line' },
  { 'F', desc = 'Move to Previous Character' },
  { 'G', desc = 'Last Line' },
  { 'T', desc = 'Move Before Previous Character' },
  { '^', desc = 'Start of Line (Non-Whitespace)' },
  { 'b', desc = 'Previous Word' },
  { 'e', desc = 'Next End of Word' },
  { 'f', desc = 'Move to Next Character' },
  { 'ge', desc = 'Previous End of Word' },
  { 'gg', desc = 'First Line' },
  { 'h', desc = 'Left' },
  { 'j', desc = 'Down' },
  { 'k', desc = 'Up' },
  { 'l', desc = 'Right' },
  { 't', desc = 'Move Before Next Character' },
  { 'w', desc = 'Next Word' },
  { '{', desc = 'Previous Empty Line' },
  { '}', desc = 'Next Empty Line' },
  { ';', desc = 'Next ftFT' },
  { ',', desc = 'Previous ftFT' },
  { '/', desc = 'Search Forward' },
  { '?', desc = 'Search Backward' },
  { 'B', desc = 'Previous WORD' },
  { 'E', desc = 'Next End of WORD' },
  { 'W', desc = 'Next WORD' },
}

M.text_objects = {
  mode = { 'o', 'x' },
  preset = true,
  { 'a', group = 'Around' },
  { 'a"', desc = '" String' },
  { "a'", desc = "' String" },
  { 'a(', desc = '[(]) Block' },
  { 'a)', desc = '[(]) Block' },
  { 'a<', desc = '<> Block' },
  { 'a>', desc = '<> Block' },
  { 'aB', desc = '[{]} Block' },
  { 'aW', desc = 'WORD with Whitespace' },
  { 'a[', desc = '[] Block' },
  { 'a]', desc = '[] Block' },
  { 'a`', desc = '` String' },
  { 'ab', desc = '[(]) Block' },
  { 'ap', desc = 'Paragraph' },
  { 'as', desc = 'Sentence' },
  { 'at', desc = 'Tag Block' },
  { 'aw', desc = 'Word with Whitespace' },
  { 'a{', desc = '[{]} Block' },
  { 'a}', desc = '[{]} Block' },
  { 'i', group = 'inside' },
  { 'i"', desc = 'Inner " String' },
  { "i'", desc = "Inner ' String" },
  { 'i(', desc = 'Inner [(])' },
  { 'i)', desc = 'Inner [(])' },
  { 'i<', desc = 'Inner <>' },
  { 'i>', desc = 'Inner <>' },
  { 'iB', desc = 'Inner [{]}' },
  { 'iW', desc = 'Inner WORD' },
  { 'i[', desc = 'Inner []' },
  { 'i]', desc = 'Inner []' },
  { 'i`', desc = 'Inner ` String' },
  { 'ib', desc = 'Inner [(])' },
  { 'ip', desc = 'Inner Paragraph' },
  { 'is', desc = 'Inner Sentence' },
  { 'it', desc = 'Inner Tag Block' },
  { 'iw', desc = 'Inner Word' },
  { 'i{', desc = 'Inner [{]}' },
  { 'i}', desc = 'Inner [{]}' },
}

M.windows = {
  preset = true,
  mode = { 'n', 'x' },
  { '<c-w>', group = 'Window' },
  { '<c-w>+', desc = 'Increase Height' },
  { '<c-w>-', desc = 'Decrease Height' },
  { '<c-w><', desc = 'Decrease Width' },
  { '<c-w>=', desc = 'Equally High and Wide' },
  { '<c-w>>', desc = 'Increase Width' },
  { '<c-w>T', desc = 'Break Out into a New Tab' },
  { '<c-w>_', desc = 'Max Out the Height' },
  { '<c-w>h', desc = 'Go to the Left Window' },
  { '<c-w>j', desc = 'Go to the Down Window' },
  { '<c-w>k', desc = 'Go to the Up Window' },
  { '<c-w>l', desc = 'Go to the Right Window' },
  { '<c-w>o', desc = 'Close All Other Windows' },
  { '<c-w>q', desc = 'Quit a Window' },
  { '<c-w>s', desc = 'Split Window' },
  { '<c-w>v', desc = 'Split Window Vertically' },
  { '<c-w>w', desc = 'Switch Windows' },
  { '<c-w>x', desc = 'Swap Current with Next' },
  { '<c-w>|', desc = 'Max Out the Width' },
  { '<c-w>H', desc = 'Move Window to Far Left' },
  { '<c-w>J', desc = 'Move Window to Far Bottom' },
  { '<c-w>K', desc = 'Move Window to Far Top' },
  { '<c-w>L', desc = 'Move Window to Far Right' },
}

M.z = {
  preset = true,
  { 'z<CR>', desc = 'Top This Line' },
  { 'z=', desc = 'Spelling Suggestions' },
  { 'zA', desc = 'Toggle All Folds Under Cursor' },
  { 'zC', desc = 'Close All Folds Under Cursor' },
  { 'zD', desc = 'Delete All Folds Under Cursor' },
  { 'zE', desc = 'Delete All Folds in File' },
  { 'zH', desc = 'Half Screen to the Left' },
  { 'zL', desc = 'Half Screen to the Right' },
  { 'zM', desc = 'Close All Folds' },
  { 'zO', desc = 'Open All Folds Under Cursor' },
  { 'zR', desc = 'Open All Folds' },
  { 'za', desc = 'Toggle Fold Under Cursor' },
  { 'zb', desc = 'Bottom This Line' },
  { 'zc', desc = 'Close Fold Under Cursor' },
  { 'zd', desc = 'Delete Fold Under Cursor' },
  { 'ze', desc = 'Right This Line' },
  { 'zg', desc = 'Add Word to Spell List' },
  { 'zi', desc = 'Toggle Folding' },
  { 'zm', desc = 'Fold More' },
  { 'zo', desc = 'Open Fold Under Cursor' },
  { 'zr', desc = 'Fold Less' },
  { 'zs', desc = 'Left This Line' },
  { 'zt', desc = 'Top This Line' },
  { 'zv', desc = 'Show Cursor Line' },
  { 'zw', desc = 'Mark Word as Bad/Misspelling' },
  { 'zx', desc = 'Update Folds' },
  { 'zz', desc = 'Center This Line' },
}

M.nav = {
  preset = true,
  mode = { 'n', 'x', 'o' },
  { 'H', desc = 'Home Line of Window (Top)' },
  { 'L', desc = 'Last Line of Window' },
  { 'M', desc = 'Middle Line of Window' },
  { '[%', desc = 'Previous Unmatched Group' },
  { '[(', desc = 'Previous (' },
  { '[<', desc = 'Previous <' },
  { '[M', desc = 'Previous Method End' },
  { '[m', desc = 'Previous Method Start' },
  { '[s', desc = 'Previous Misspelled Word' },
  { '[{', desc = 'Previous {' },
  { ']%', desc = 'Next Unmatched Group' },
  { '](', desc = 'Next (' },
  { ']<', desc = 'Next <' },
  { ']M', desc = 'Next Method End' },
  { ']m', desc = 'Next Method Start' },
  { ']s', desc = 'Next Misspelled Word' },
  { ']{', desc = 'Next {' },
}

M.g = {
  preset = true,
  mode = { 'n', 'x', 'o' },
  { 'g%', desc = 'Cycle Backwards Through Results' },
  { 'g,', desc = 'Go to [count] Newer Position in Change List' },
  { 'g;', desc = 'Go to [count] Older Position in Change List' },
  { 'gN', desc = 'Search Backwards and Select' },
  { 'gT', desc = 'Go to Previous Tab Page' },
  { 'gf', desc = 'Go to File Under Cursor' },
  { 'gi', desc = 'Go to Last Insert' },
  { 'gn', desc = 'Search Forwards and Select' },
  { 'gt', desc = 'Go to Next Tab Page' },
  { 'gv', desc = 'Last Visual Selection' },
  { 'gx', desc = 'Open File with System App' },
}

M.lsp = {
  preset = true,
  mode = { 'n' },
}

M.desc_overrides = {
  ['gc'] = 'Toggle Comment',
  ['gcc'] = 'Toggle Comment Line',
  ['[<leader>'] = 'Add Empty Line Above Cursor',
  [']<leader>'] = 'Add Empty Line Below Cursor',
  ['grn'] = 'LSP: Rename',
  ['grr'] = 'LSP: References',
  ['gO'] = 'LSP: Document Symbol',
  ['gri'] = 'LSP: Implementation',
  ['grt'] = 'LSP: Type Definition',
  ['gra'] = 'LSP: Code Actions',
  ['<C-S>'] = 'LSP: Signature Help',
  ['K'] = 'LSP: Hover',
  ['gx'] = 'Open URL',
}

function M.setup()
  local wk = require('which-key')
  wk.add(M.operators)
  wk.add(M.motions)
  wk.add(M.text_objects)
  wk.add(M.windows)
  wk.add(M.z)
  wk.add(M.nav)
  wk.add(M.g)
  wk.add(M.lsp)
end

return M
