local M = {}

function M.buffer_entry_maker(opts)
  local entry_display = require('telescope.pickers.entry_display')
  local make_entry = require('telescope.make_entry')
  local utils = require('telescope.utils')
  local has_devicons, devicons = pcall(require, 'nvim-web-devicons')
  local status = require('configs.icons').file_status
  local ok_plenary, plenary_path = pcall(require, 'plenary.path')
  local path_separator = ok_plenary and plenary_path.path.sep or '/'

  opts = opts or {}
  local inner = make_entry.gen_from_buffer(opts)

  -- cols: [icon?] [dir+file as one string] [spacer] [marker]
  local displayer = entry_display.create({
    separator = '',
    items = {
      has_devicons and { width = 2 } or nil,
      { remaining = true },
      {},
      {},
    },
  })

  return function(item)
    local entry = inner(item)
    local absolute_path = vim.api.nvim_buf_get_name(entry.bufnr)
    local is_modified = vim.api.nvim_buf_get_option(entry.bufnr, 'modified')

    local directory_path = vim.fn.fnamemodify(absolute_path, ':h')
    local file_name = vim.fn.fnamemodify(absolute_path, ':t')

    -- Shorten only the directory part and avoid showing './' for cwd root files
    local display_directory = ''
    if directory_path ~= '' then
      display_directory = utils.transform_path(opts, directory_path) or ''
      if display_directory == '.' or display_directory == './' then
        display_directory = ''
      end
    end
    if display_directory ~= '' then
      display_directory = display_directory .. path_separator
    end

    local full_path = display_directory .. file_name

    entry.display = function()
      local spacer = is_modified and ' ' or ''
      local marker = is_modified and { status.modified, 'TelescopeBufferMarker' } or ''

      local icon, icon_hl
      if has_devicons then
        icon, icon_hl = devicons.get_icon(file_name, nil, { default = true })
      end

      -- Build the line first, and preserve highlights from displayer (includes devicon hl)
      local line, base_hl = displayer({
        has_devicons and { icon, icon_hl } or nil,
        full_path,
        spacer,
        marker,
      })

      -- Start with highlights generated by displayer (so devicon retains its color)
      local hl = base_hl or {}

      local full_path_start = line:find(full_path, 1, true) - 1
      if full_path_start then
        local dir_len = #display_directory
        local file_len = #file_name

        if dir_len > 0 then
          -- Highlight only the directory portion (including trailing slash)
          table.insert(hl, { { full_path_start, full_path_start + dir_len }, 'SnacksPickerDir' })
        end

        -- Highlight only the filename portion
        local file_start = full_path_start + dir_len
        local file_end = file_start + file_len + 1
        table.insert(hl, { { file_start, file_end }, 'SnacksPickerFile' })
      end

      return line, hl
    end

    return entry
  end
end

return M
